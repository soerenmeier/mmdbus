// This code was autogenerated with dbus-codegen-rust
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait ModemFirmware {
    fn list(&self) -> Result<(String, Vec<arg::PropMap>), dbus::Error>;
    fn select(&self, uniqueid: &str) -> Result<(), dbus::Error>;
    fn update_settings(&self) -> Result<(u32, arg::PropMap), dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> ModemFirmware for blocking::Proxy<'a, C> {

    fn list(&self) -> Result<(String, Vec<arg::PropMap>), dbus::Error> {
        self.method_call("org.freedesktop.ModemManager1.Modem.Firmware", "List", ())
    }

    fn select(&self, uniqueid: &str) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.ModemManager1.Modem.Firmware", "Select", (uniqueid, ))
    }

    fn update_settings(&self) -> Result<(u32, arg::PropMap), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.ModemManager1.Modem.Firmware", "UpdateSettings")
    }
}
