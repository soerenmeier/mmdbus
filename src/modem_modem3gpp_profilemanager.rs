// This code was autogenerated with dbus-codegen-rust
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait ModemModem3gppProfileManager {
    fn list(&self) -> Result<Vec<arg::PropMap>, dbus::Error>;
    fn set(&self, requested_properties: arg::PropMap) -> Result<arg::PropMap, dbus::Error>;
    fn delete(&self, properties: arg::PropMap) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct ModemModem3gppProfileManagerUpdated {
}

impl arg::AppendAll for ModemModem3gppProfileManagerUpdated {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for ModemModem3gppProfileManagerUpdated {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ModemModem3gppProfileManagerUpdated {
        })
    }
}

impl dbus::message::SignalArgs for ModemModem3gppProfileManagerUpdated {
    const NAME: &'static str = "Updated";
    const INTERFACE: &'static str = "org.freedesktop.ModemManager1.Modem.Modem3gpp.ProfileManager";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> ModemModem3gppProfileManager for blocking::Proxy<'a, C> {

    fn list(&self) -> Result<Vec<arg::PropMap>, dbus::Error> {
        self.method_call("org.freedesktop.ModemManager1.Modem.Modem3gpp.ProfileManager", "List", ())
            .and_then(|r: (Vec<arg::PropMap>, )| Ok(r.0, ))
    }

    fn set(&self, requested_properties: arg::PropMap) -> Result<arg::PropMap, dbus::Error> {
        self.method_call("org.freedesktop.ModemManager1.Modem.Modem3gpp.ProfileManager", "Set", (requested_properties, ))
            .and_then(|r: (arg::PropMap, )| Ok(r.0, ))
    }

    fn delete(&self, properties: arg::PropMap) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.ModemManager1.Modem.Modem3gpp.ProfileManager", "Delete", (properties, ))
    }
}
