// This code was autogenerated with dbus-codegen-rust
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait ModemManager {
    fn scan_devices(&self) -> Result<(), dbus::Error>;
    fn set_logging(&self, level: &str) -> Result<(), dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> ModemManager for blocking::Proxy<'a, C> {

    fn scan_devices(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.ModemManager1", "ScanDevices", ())
    }

    fn set_logging(&self, level: &str) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.ModemManager1", "SetLogging", (level, ))
    }
}
